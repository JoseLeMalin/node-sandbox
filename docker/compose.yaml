version: '3.8'
# command: docker compose up --build
# https://medium.com/@jewelski/quickly-set-up-a-local-postgres-database-using-docker-5098052a4726
# https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/#Why-should-you-containerize-Postgres
# https://github.com/docker/awesome-compose/tree/master/postgresql-pgadmin
# docker compose -f .docker/compose.yaml up
# docker compose -f .docker/compose.yaml down
name: node-sandbox-container
services:
  # node-sandbox-app:
  #   build:
  #     context: ../ 
  #     dockerfile: docker/dockerfile
  #   container_name: node-sandbox-app
  #   # environment:
  #   #   - POSTGRES_USER=${POSTGRES_USER}
  #   #   - POSTGRES_PASSWORD=${POSTGRES_PW}
  #   #   - POSTGRES_DB=${POSTGRES_DB} #optional (specify default database instead of $POSTGRES_DB)
  #   env_file:
  #     - ../.env.dev
  #   ports:
  #     - "3000:3000"
  #   restart: unless-stopped
  node-sandbox-postgres:
    container_name: node-sandbox-postgres
    image: postgres:15.5-alpine3.18
    restart: unless-stopped
    env_file: ../.env.dev
    # environment:
    #   - POSTGRES_USER=${POSTGRES_USER}
    #   - POSTGRES_PASSWORD=${POSTGRES_PW}
    #   - POSTGRES_DB=${POSTGRES_DB} #optional (specify default database instead of $POSTGRES_DB)
    hostname: localhost
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Zookeeper required by Kafka for managing configuration, naming, synchronization, and group services
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
    restart: always
    logging:
      driver: none

  # kafka broker
  broker:
    image: confluentinc/confluent-local:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "8082:8082"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_PROCESS_ROLES: 'broker,controller'
      # KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      # KAFKA_LISTENERS: 'PLAINTEXT://localhost:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      # KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # KAFKA_REST_HOST_NAME: rest-proxy
      # KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://localhost:8082"
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
  # pgadmin:
  #   container_name: youcode-pgadmin
  #   image: dpage/pgadmin4:latest
  #   depends_on:
  #     - postgres
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
  #     - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
  #   ports:
  #     - "5050:80"
  #   restart: unless-stopped

volumes:
  postgres-data:
networks:
  node-sandbox-network:
    external: true